@page "/chatmessages/{ChatroomId:guid}"
@using BlazorApp.Client.DTO
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.SignalR.Client
@attribute [Authorize]
@implements IAsyncDisposable
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

@rendermode InteractiveAuto

<PageTitle>Index</PageTitle>

<AuthorizeView>
    <Authorized>
        <div class="container overflow-auto shadow-sm p-3 mb-5 bg-white rounded">
            @if (!chatmessages.Any())
            {
                <p>No messages yet.</p>
            }
            @foreach (var userMessage in chatmessages)
            {
               var sentByCurrentUser = userMessage.Username == context.User.Identity.Name;

                <div class=@($"row mb-2 d-flex {(sentByCurrentUser ? "justify-content-end" : string.Empty)}")>
                    <div class=@($"card {(sentByCurrentUser ? "text-end" : string.Empty)} border-light mb-3 p-0") style="max-width: 20rem;">
                        <div class="card-body">
                            <h5 class="card-title">@userMessage.Username</h5>
                            <p class="card-text">@userMessage.Message</p>
                        </div>
                        <div class="card-footer"><small>@userMessage.DateSent.ToShortDateString() @userMessage.DateSent.ToShortTimeString()</small></div>
                        </div>
                </div>
            }
        </div>

        <div class="container">
            <div class="row">
                <div class="col-6">
                    <textarea @bind="_message" class="form-control" placeholder="Type your message..."></textarea>
                </div>
                <div class="col-3">
                    <button id="send-button" @onclick="AddChatMessageAsync" class="btn btn-primary">Send</button>
                </div>
            </div>
        </div>
    </Authorized>
</AuthorizeView>

<script>
    function scrollToBottom() {
        window.scrollTo(0, document.body.scrollHeight);
    }
</script>

@code {
    private HubConnection _hubConnection;
    private string _message;

    private List<UserMessage> chatmessages = new();

    [Parameter]
    public Guid ChatroomId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .Build();


        _hubConnection.On<List<UserMessage>>("ReceiveMessage",
            async (userMessages) =>
            {
                chatmessages = userMessages.ToList();

                await InvokeAsync(StateHasChanged);

                await JS.InvokeVoidAsync("scrollToBottom");
            });

        await _hubConnection.StartAsync();
    }

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddChatMessageAsync()
    {
        if (!string.IsNullOrEmpty(_message))
        {
            var userMessage = new UserMessage
                {
                    ChatroomId = ChatroomId,
                    Message = _message
                };
            await _hubConnection.SendAsync("SendMessage", userMessage);

            _message = string.Empty;
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }
}
